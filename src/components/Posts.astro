---
import { HTMLAttributes } from "astro/types";
import Color from "color";
import { getPosts } from "../api/github";

export interface Props extends HTMLAttributes<"ul"> {}

let errored = false;
let response: Awaited<ReturnType<typeof getPosts>>;
try {
  response = await getPosts();
} catch (error) {
  errored = true;
}

const { class: className, ...props } = Astro.props;
---

<ul class:list={[className]} {...props}>
  {
    response.search.edges.map(({ node: post }) => {
      const topic = post.labels.nodes.find((label) =>
        label.name.startsWith("topic:")
      );

      const color = Color(`#${topic.color}`);
      const hsl = color.hsl();
      const bg = `${hsl.hue().toFixed(2)} ${hsl.saturationv().toFixed(2)}% ${hsl
        .lightness()
        .toFixed(2)}%`;
      const textColor = color.isDark() ? "#fff" : "#000";

      return (
        <li class="contents">
          <a
            href={post.url}
            target="_blank"
            rel="noopener noreferrer"
            style={{
              "--bg-hsl": bg,
              "--color": textColor,
            }}
            class="card duration-200 ease-in rounded-3xl z-10 snap-start top-0 p-8 shrink-0"
          >
            <div class="h-full flex flex-col justify-between">
              <ul class="flex gap-1">
                {post.labels.nodes
                  .filter((label) => label.name !== "published")
                  .map((label) => (
                    <li class="text-xs px-2 rounded-full bg-white/10 border-white/20 border-[1px]">
                      {label.name.includes("topic:")
                        ? label.name.split("topic:").at(1)
                        : label.name}
                    </li>
                  ))}
              </ul>
              <p class="text-2xl">{post.title}</p>
            </div>
          </a>
        </li>
      );
    })
  }
</ul>

<style>
  .card {
    --bg-hsl: 0 0% 100%;
    --color: theme("colors.black");
    --shadow-spread: theme("spacing.4");
    inline-size: 20rem;
    block-size: 25rem;
    background-color: hsl(var(--bg-hsl) / 1);
    color: var(--color);
    box-shadow: 0 -1px theme("spacing.2") theme("colors.on-primary/0.2"),
      0 1px var(--shadow-spread) hsl(var(--bg-hsl) / 0.8);

    &:hover {
      --shadow-spread: theme("spacing.1");
    }
  }
</style>
