---
import { HTMLAttributes } from "astro/types";
import Color from "color";

import { getPosts } from "../api/github";
import { formatDate } from "../utils";

export type Props = HTMLAttributes<"ul">;

const posts = await getPosts(10);

const { class: className, ...props } = Astro.props;
---

<ul class:list={[className]} {...props}>
  {
    posts.map((post) => {
      const topic = post.labels.nodes.find((label) =>
        label.name.startsWith("topic:")
      );

      const color = Color(`#${topic.color}`);
      const hsl = color.hsl();
      const textColor = color.isDark() ? "#fff" : "#000";
      const publishedAt = formatDate(post.publishedAt);

      // TODO: slugify
      return (
        <li class="shrink-0 snap-start">
          <a
            href={`/posts/${post.number}`}
            rel="prefetch"
            style={{
              "--bg-h": `${hsl.hue().toFixed(2)}deg`,
              "--bg-s": `${hsl.saturationv().toFixed(2)}%`,
              "--bg-l": `${hsl.lightness().toFixed(2)}%`,
              "--color": textColor,
            }}
            class="card outline-on-primary block rounded-2xl outline-4 transition-all duration-300 ease-in"
          >
            <div class="flex h-full flex-col justify-between p-8">
              <div class="self-start rounded-md bg-white/20 py-1 px-3 text-xs backdrop-blur-md">
                {publishedAt}
              </div>
              <p class="text-2xl">{post.title}</p>
            </div>
          </a>
        </li>
      );
    })
  }
</ul>

<style>
  @property --bg-gradient-saturation {
    syntax: "<percentage>";
    inherits: true;
    initial-value: 0%;
  }
  .card {
    --bg-hsl: var(--bg-h) var(--bg-s) var(--bg-l);
    --color: theme("colors.black");
    --bg: hsl(var(--bg-hsl) / 1);
    --bg-gradient-saturation: max(calc(var(--bg-s) - 30%), 0%);
    inline-size: clamp(14rem, 20rem, 70vw);
    block-size: clamp(20rem, 40vh, 25rem);
    background-color: var(--bg);
    background-image: radial-gradient(
        circle at 90% 10%,
        hsl(
          max(calc(var(--bg-h) - 10deg), 0deg) var(--bg-gradient-saturation)
            var(--bg-l)
        ),
        hsl(
          max(calc(var(--bg-h) - 10deg), 0deg) var(--bg-gradient-saturation)
            var(--bg-l) / 0%
        )
      ),
      radial-gradient(
        circle at 10% 90%,
        hsl(
          min(calc(var(--bg-h) + 10deg), 360deg) var(--bg-gradient-saturation)
            max(calc(var(--bg-l) - 10%), 0%)
        ),
        hsl(
          min(calc(var(--bg-h) + 15deg), 360deg) var(--bg-gradient-saturation)
            max(calc(var(--bg-l) - 10%), 0%) / 0%
        )
      );
    border: 2px solid hsl(var(--bg-h) var(--bg-s) 50% / 0.5);
    color: var(--color);
    box-shadow: 0 -1px theme("spacing.2") theme("colors.on-primary/0.2"),
      0 1px theme("spacing.4") hsl(var(--bg-hsl) / 0.8);
  }
</style>
