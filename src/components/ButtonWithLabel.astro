---
import { type HTMLTag, type Polymorphic } from "astro/types";
import { twMerge } from "tailwind-merge";

type Props<Tag extends HTMLTag> = Polymorphic<{
  /** @default 'button' */
  as: Tag;
  label: string;
}>;

const { as: Tag = "button", label, ...props } = Astro.props;
const id = `btn-${crypto.randomUUID().slice(0, 4)}`;
---

<div class="label relative">
  <label
    id={id}
    class="label-text pointer-events-none absolute flex items-center justify-center whitespace-nowrap rounded-full border-2 border-primary/75 bg-primary/20 p-2 px-3 text-sm text-primary backdrop-blur-md transition-all duration-200 ease-out"
    >{label}</label
  >
  <Tag
    type={props.type ? props.type : Tag === "button" ? "button" : undefined}
    {...props}
    aria-labelledby={id}
    title={label}
    class:list={twMerge(
      "button",
      "relative cursor-pointer outline-none flex rounded-full justify-center items-center border-2 border-on-background/50 aspect-square w-16 text-on-background/80 transition-colors duration-150 hover:border-primary hover:bg-primary/90 hover:text-on-primary focus:border-primary focus:bg-primary/90 focus:text-on-primary",
      props.class,
    )}
  >
    <slot />
  </Tag>
</div>

<style>
  .label-text {
    inset-inline-start: 50%;
    inset-block-start: -90%;

    opacity: 0;
    transform: translateX(-50%) translateY(0.5rem);
  }

  .label:where(:hover, :focus-within) .label-text {
    opacity: 1;
    transform: translateX(-50%);

    @apply ease-in;
  }
</style>
