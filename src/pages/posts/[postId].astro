---
import { GetStaticPaths } from "astro";
import { FragmentPostFragment } from "../../api/generated/graphql";
import { getPost, getPosts } from "../../api/post";
import Header from "../../components/Header.astro";
import MainLayout from "../../layouts/Main.astro";
import PostLayout from "../../layouts/Post.astro";
import { formatDate } from "../../utils";
import { frontmatter, parse } from "../../utils/markdown";

const { postId } = Astro.params;
let post: FragmentPostFragment = Astro.props.post;

if (!post) {
  post = await getPost(Number(postId));
}

const data = frontmatter(post);
const { content } = parse(post.body);

const publishedAt = formatDate(post.publishedAt);

export const prerender = true;

export const getStaticPaths: GetStaticPaths = async () => {
  const posts = await getPosts(20);

  return posts.map((post) => {
    return {
      params: {
        postId: post.number,
      },
      props: {
        post,
      },
    };
  });
};
---

<MainLayout
  title={post.title}
  description={data.description}
  image={data.poster}
>
  <header class="bg-primary text-on-primary">
    <PostLayout>
      <div class="flex h-full min-h-[80vh] flex-col gap-12">
        <Header backLink="/posts">
          <span slot="back-link"
            ><b>All posts</b>
            <span class="xs:inline hidden">by Oleksandr</span></span
          >
        </Header>
        <div class="my-auto flex flex-col gap-8">
          {
            data.poster && (
              // TODO: apply image optimizations
              <img
                src={data.poster}
                alt={data.posterAlt}
                class="mx-auto aspect-video min-h-0 rounded-xl shadow-xl"
              />
            )
          }
          <div class="flex flex-col gap-8 text-center">
            <h1 class="text-4xl font-semibold md:text-6xl">{post.title}</h1>
            <time
              datetime={post.publishedAt}
              class="text-on-primary/70 text-sm font-semibold"
              >{publishedAt}</time
            >
          </div>
        </div>
      </div>
    </PostLayout>
  </header>
  <PostLayout>
    <main set:html={content} class="main text-on-background/80" />
  </PostLayout>
</MainLayout>

<style is:global>
  .main kbd {
    box-shadow: inset 0 -1px 0 theme("colors[slate][500]");
    @apply rounded-md text-[0.7rem] align-middle inline-block px-1 py-0.5 font-mono leading-none text-slate-300 border-[1px] border-slate-500 bg-slate-800;
  }
  .main pre {
    overflow: overlay;
  }
</style>
