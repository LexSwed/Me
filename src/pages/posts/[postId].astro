---
import { GetStaticPaths } from "astro";
import { getPost, getPosts, Post } from "../../api/post";
import Header from "../../components/Header.astro";
import LinkIcon from "../../icons/link.astro";
import MainLayout from "../../layouts/Main.astro";
import PostLayout from "../../layouts/Post.astro";
import { formatDate } from "../../utils";

const { postId } = Astro.params;
let post: Post = Astro.props.post;

if (!post) {
  post = await getPost(Number(postId));
}

const publishedAt = formatDate(post.publishedAt);

export const prerender = true;

export const getStaticPaths: GetStaticPaths = async () => {
  const posts = await getPosts(100);

  return posts.map((post) => {
    return {
      params: {
        postId: post.slug,
      },
      props: {
        post,
      },
    };
  });
};
---

<MainLayout
  title={post.title}
  description={post.summary}
  image={post.poster?.img}
>
  <header class="bg-primary text-on-primary">
    <PostLayout>
      <div class="flex h-full flex-col gap-12">
        <Header backLink="/posts">
          <span slot="back-link"
            ><b>All posts</b>
            <span class="xs:inline hidden">by Oleksandr</span></span
          >
        </Header>
        <div class="my-auto flex flex-col gap-8">
          {
            post.poster && (
              // TODO: apply image optimizations
              <img
                src={post.poster.img}
                alt={post.poster.alt}
                class="mx-auto aspect-video min-h-0 rounded-2xl shadow-lg"
              />
            )
          }
          <div class="flex flex-col gap-8 text-center">
            <h1 class="text-4xl font-semibold md:text-6xl">{post.title}</h1>
            <time datetime={post.publishedAt} class="font-semibold"
              >{publishedAt}</time
            >
          </div>
        </div>
      </div>
    </PostLayout>
  </header>
  <PostLayout>
    <main set:html={post.body.content} class="main text-on-background/80" />
    <footer class="mt-12 flex justify-center p-8">
      <div class="flex items-center gap-12">
        <button
          type="button"
          id="copy-url"
          aria-label="Copy link"
          class="border-on-background/20 hover:bg-primary/90 hover:text-on-primary focus:bg-primary/90 focus:text-on-primary focus:border-primary text-on-background/70 hover:border-primary relative rounded-full border-2 p-4 transition-colors duration-150"
        >
          <LinkIcon class="h-5 w-5" />
        </button>
      </div>
    </footer>
  </PostLayout>
</MainLayout>

<style is:global>
  .main kbd {
    box-shadow: inset 0 -1px 0 theme("colors[slate][500]");
    @apply rounded-md text-[0.7rem] align-middle inline-block px-1 py-0.5 font-mono leading-none text-slate-300 border-[1px] border-slate-500 bg-slate-800;
  }
  .main pre {
    overflow: overlay;
  }

  #copy-url:after {
    content: attr(aria-label);
    inset-block: 15%;
    inset-inline-start: calc(100% + theme(spacing.4));

    opacity: 0;
    transform: translateY(0.5rem);

    @apply duration-200 ease-out transition-all absolute text-sm whitespace-nowrap p-2 flex items-center justify-center border-2 border-primary/75 bg-primary/20 text-primary rounded-2xl;
  }

  #copy-url:where(:hover, :focus):after {
    opacity: 1;
    transform: none;

    @apply ease-in;
  }
  #copy-url[data-copied="true"] .text {
    opacity: 1;
    transform: none;
  }
</style>

<script>
  const button = document.getElementById("copy-url");

  let timeout = null;
  button.addEventListener("click", () => {
    button.setAttribute("aria-label", "Copied");
    navigator.clipboard.writeText(document.location.href);
    if (timeout) {
      clearTimeout(timeout);
      timeout = null;
    }
    timeout = setTimeout(() => {
      button.setAttribute("aria-label", "Copy link");
    }, 1500);
  });
</script>
