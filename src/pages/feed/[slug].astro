---
import Header from "../../components/Header.astro";
import LinkIcon from "../../icons/link.astro";
import TopicIcon from "../../icons/topic.astro";
import MainLayout from "../../layouts/Main.astro";
import PostLayout from "../../layouts/Post.astro";
import { formatDate } from "../../utils";
import { type InferGetStaticPropsType } from "astro";
import { getFeed } from "../../content/_utils";

export type Props = InferGetStaticPropsType<typeof getStaticPaths>;

export const prerender = true;

export async function getStaticPaths() {
  const feed = await getFeed();
  return feed.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}
const { post } = Astro.props;
const { title, summary, poster, posterAlt, publishDate } = post.data;
const publishedAt = formatDate(publishDate);
const { Content } = await post.render();
---

<MainLayout title={title} description={summary} image={poster.src}>
  <header class="bg-primary text-on-primary">
    <PostLayout>
      <div class="flex h-full flex-col gap-6 sm:gap-10">
        <Header backLink="/feed">
          <span slot="back-link"
            ><b>All posts</b>
            <span class="xs:inline hidden">by Oleksandr</span></span
          >
        </Header>
        <div class="my-auto flex flex-col gap-6 sm:gap-8">
          {
            poster && (
              <img
                src={poster.src}
                width={poster.width}
                height={poster.height}
                alt={posterAlt}
                class="animate-poster box-shadow-[theme(boxShadow.sm)_theme(boxShadow.lg)] mx-auto aspect-video min-h-0 w-full rounded-2xl object-cover"
              />
            )
          }
          <div class="animate-heading flex flex-col gap-8">
            <h1 class="text-3xl font-bold sm:text-4xl">{title}</h1>
            <div class="text-on-primary/80 flex justify-between text-base">
              {
                post.data.topic && (
                  <div class="flex items-center gap-2">
                    <TopicIcon class="h-4 w-4" stroke-width="2" />
                    <span>
                      Published in{" "}
                      <a
                        href={`/feed?topic=${post.data.topic}`}
                        class="font-semibold underline-offset-2 hover:underline focus:underline"
                      >
                        {post.data.topic}
                      </a>
                    </span>
                  </div>
                )
              }
              <time datetime={publishDate.toISOString()}>{publishedAt}</time>
            </div>
          </div>
        </div>
      </div>
    </PostLayout>
  </header>
  <div class="animate-content">
    <main class="main text-on-background/90">
      <Content />
    </main>
    <PostLayout>
      <footer class="mt-12 flex justify-center p-8">
        <div class="flex items-center gap-12">
          <button
            type="button"
            id="copy-url"
            aria-label="Copy link"
            class="border-on-background/20 hover:bg-primary/90 hover:text-on-primary focus:bg-primary/90 focus:text-on-primary focus:border-primary text-on-background/70 hover:border-primary relative rounded-full border-2 p-4 transition-colors duration-150"
          >
            <LinkIcon class="h-5 w-5" />
          </button>
        </div>
      </footer>
    </PostLayout>
  </div>
</MainLayout>

<style>
  #copy-url:after {
    content: attr(aria-label);
    inset-block: 15%;
    inset-inline-start: calc(100% + theme(spacing.4));
    pointer-events: none;

    opacity: 0;
    transform: translateY(0.5rem);

    @apply duration-200 ease-out transition-all absolute text-sm whitespace-nowrap p-2 flex items-center justify-center border-2 border-primary/75 bg-primary/20 text-primary rounded-2xl;
  }

  #copy-url:where(:hover, :focus):after {
    opacity: 1;
    transform: none;

    @apply ease-in;
  }
  #copy-url[data-copied="true"] .text {
    opacity: 1;
    transform: none;
  }
  .animate-poster {
    --y: 0.3rem;
    animation: slideY 0.6s ease-out both;
  }
  .animate-heading {
    --y: 0.3rem;
    animation: slideY 0.6s ease-out both;
  }
  .animate-content {
    --y: 0.5rem;
    animation: slideY 0.6s 0.2s ease-out both;
  }

  @keyframes slideY {
    0% {
      transform: translateY(var(--y));
      opacity: 0;
    }
    75% {
      opacity: 1;
    }
    100% {
      transform: none;
      opacity: 1;
    }
  }
</style>

<script data-title={title}>
  const button = document.getElementById("copy-url");

  const shareData = {
    title: document.currentScript.dataset.title,
    text: `I just read "${document.currentScript.dataset.title}" by @lexswed`,
    url: document.location.href,
  };

  const supportsShare = "share" in navigator;
  function resetLabel() {
    if (supportsShare) {
      button.setAttribute("aria-label", "Share");
    } else {
      button.setAttribute("aria-label", "Copy link");
    }
  }
  resetLabel();
  let timeout = null;
  button.addEventListener("click", async () => {
    if ("share" in navigator) {
      await navigator.share(shareData);
    } else {
      button.setAttribute("aria-label", "Copied");
      navigator.clipboard.writeText(document.location.href);
    }
    if (timeout) {
      clearTimeout(timeout);
      timeout = null;
    }
    timeout = setTimeout(resetLabel, 1500);
  });
</script>
